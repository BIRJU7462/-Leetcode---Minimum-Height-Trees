A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.
Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).Return a list of all MHTs' root labels. You can return the answer in any order.
The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf
Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.

Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        //firstly create a adjacency list
        vector <vector <int> > adj(n);
        vector <int> incoming(n,0);
        for(int i = 0; i < edges.size(); i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
            
            //Also count all the incoming edges of a particular node
            incoming[u]++;
            incoming[v]++;
            
        }
        //Take a ans variable to store the final result
        vector <int> ans;
        queue <int> q;
        for(int i = 0; i < n; i++)
        {
            //push all the elements in queue whose incloming length is 1.
            if(incoming[i] == 1)
            {
                q.push(i);
            }
        }
        
        while(!q.empty())
        {
            //Take a size of a current queue
            int size = q.size();
            ans.clear();
            for(int i = 0; i < size; i++)
            {
            int n = q.front();
            q.pop();
            ans.push_back(n);
             for(int i = 0; i < adj[n].size(); i++)
             {
                 // Do -1 until the value comes to be 1.
                 incoming[adj[n][i]]--;
                 //if size is equall to 1 then again push the elements into the queue
                 if(incoming[adj[n][i]] == 1)
                 {
                     q.push(adj[n][i]);
                 }
             }
        }
    }
        //By the way it there are only one node available in graph then answer will be 0.
        if(n == 1)
        {
            ans.push_back(0);
        }
        return ans;
        
    }
};